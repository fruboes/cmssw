0. <general tip> Usage of the "screen" utility usually makes work much 
    easier. You can find a tutorial under

   http://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/

   screen is included in most (all?) recent linux distros, but often is not
   installed by default. Ask your administrator for it.

1. Follow info in git-cheatsheet.txt to get the code. Build it

2. Create a file in your home directory (~/MyAnalisys.py) containing 
definition of data directories for local storage:

########### MyAnalisys.py: #########################################
PATbasePATH="/scratch/scratch0/tfruboes/DJNewFW/PATFiles/"
TTreeBasePATH="/scratch/scratch0/tfruboes/DJNewFW/TreeFiles/"
####################################################################

(obviously you need to use different paths). Above file defines, where
the framework will copy trees (and PATfiles) from the (central) skim.


3. Tell the framework where the above file is: 

export SmallXAnaDefFile=~/MyAnalisys.py

 you can put this in your .bashrc

3. Another shell environment variable (SmallXAnaVersion) contains path to a
file with skim definition. You can set this variable by sourcing selected
file from MNTriggerStudies/MNTriggerAna/env/ directory:

cd MNTriggerStudies/MNTriggerAna/env/
source do_DiJet_20140509.sh

4. (xcheck) See your framework env related variables

env | grep Small
    SmallXAnaDefFile=/home/8/tfruboes/MyAnalisys.py
    SmallXAnaVersion=MNTriggerStudies.MNTriggerAna.samples.Samples_DiJet_20140509

5. Copy data:

../scripts/copyAnaData.py -t

Above command uses lcg-cp to get the tree files and relies on valid grid proxy. 
If it fails complaining about it, you can get one by running grid-proxy-init

The files will land in subdirectories the directory defined by TTreeBasePATH 
variable from MyAnalisys.py

6. You can see example how to automatically get file list for every dataset
and corresponding normalization factors inside

MNTriggerStudies/MNTriggerAna/python/GetDatasetInfo.py

above module is runable, it will show info on datasets defined by file from
SmallXAnaVersion variable (in the example above - Samples_DiJet_20140509)

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
- Running analysis

Currently the only fully working analysis chain is for MN trigger studies.

0. Make sure you have all env variables defined :

    env | grep Small
    SmallXAnaDefFile=/home/8/tfruboes/MyAnalisys.py
    SmallXAnaVersion=MNTriggerStudies.MNTriggerAna.samples.Samples_DiJet_20140509

1. Go to MNTriggerStudies/MNTriggerAna/test/mnTrgAnalyzer/ directory. Run

     ./MNTrgAnaProofReader.py
    
2 run 

    ./drawMNTrgEfficiencyPlots.py

    efficiency histograms (L1.png, HLT.png) will appear in your home
directory.


3. Go through notes below to get a glimpse what is happening (or that is
wrong):


 Notes:
  - Running tha analyzer from a different directory will fail. Ie you should not try:

        cd MNTriggerStudies/MNTriggerAna/test/mnTrgAnalyzer/
        ./mnTrgAnalyzer/MNTrgAnaProofReader.py # wont work

    the correct way is: 

        cd MNTriggerStudies/MNTriggerAna/test/mnTrgAnalyzer/mnTrgAnalyzer/
        ./MNTrgAnaProofReader.py # YAY!

  - by default it will run only on 10 treefiles from each dataset. You can run
    through all of the files by removing maxFiles parameter from runAll() call
  -- this is meant to speed development (final plots should be obtained on all
     files). Running through all currently used  datesets takes ~5 minutes on 
     a 4 core machine (for 35 GeV reco jet threshold)

  - This analyzer uses proof (part of the root framework) to use all cores for
    analysis. In case you are using some public login service (like lxplus)
    for development you may want to disable multithreading by adding

          nWorkers=1

    to the runAll() parameters. Otherwise your worker most likely will get
    killed.

  - Resulting plots will be saved in your home directory, plotsHLT.root file
  -- Note, that the histograms get correct normalization not depending on
     the value of maxFiles parameters

  - comunication with the analyzer is performed in a special way. First a
    dictionary is created and passed via slaveParameters parameter (of
    the runAll() function). Values from this dictionary will appear as data
    attributes of the analyzing class


  - note, that proof by default uses a directory named .proof placed in your home
    directory. Since there are some file operations done there it may be wise
    to move it (and use a symbolic link) into a different place for faster file 
    operations. My setup utilizes local scratch space exported via NFS:

        ls -la ~ | grep proof
        lrwxrwxrwx   1 tfruboes xxxxx       39 Jul 12  2011 .proof -> /scratch/scratch0/tfruboes/ProofWorkDir

    this was achieved by running

        cd ~
        mkdir /scratch/scratch0/tfruboes/ProofWorkDir/
        ln -s /scratch/scratch0/tfruboes/ProofWorkDir/ .proof

  -- Note, that proof analyzer can be also ran across multiple computers (see
     http://pod.gsi.de/). Your proof dir must be then seen from every of them
     (ie you must use some network shared directory, so sticking with home
     directory may not be bad idea)

  - Typically you wont see error messages if something goes wrong. Logs for
    last run are saved inside the .proof directory, see 

     ~/.proof/<veryLongNameCorrespondingToRunningDirectory>/last-lite-session/worker-0.0.log

    where <veryLongNameCorrespondingToRunningDirectory> in my case is

      scratch-scratch0-tfruboes-2014.04.HLT-CMSSW_6_2_8-src-MNTriggerStudies-MNTriggerAna-test-mnTrgAnalyzer

    error messages may be hard to identify. Here you can find one example:

        15:53:29  1220 Wrk-0.0 | Info in <TPySelector::AbortProcess>: 'list' object has no attribute 'push_back'

     (I've tried to use c++ method "push_back" on a python list object, which
        lead to a crash) 

  -  Sometimes your analyzer will crash, the output rootfile will stay empty, and
     no reason will be visible in proof log files. The only way than is to
     partially comment/uncomment parts of your analyzer code in order to
     identify the problematic part.

     There is also a possibility, that you are looking at wrong log file (from
     wrong directory under .proof) as I tend to do.






